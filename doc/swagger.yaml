# View focus.mf api docs at /apidoc
# This file is watched by nodemon and can be live developed.
# Spec: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md
openapi: "3.0.2"

info:
  version: 1.0.0
  title: Focus.MF API
  description: Focus.mf API supplies the functionality for the focus.mf webapp.

servers:
- url: http://localhost:3000/
  description: Local development

tags:
- name: "Utility"
  description: "All service utility endpoints"
- name: "User"
  description: "All user account endpoints"

paths:
  /health:
    get:
      tags:
      - "Utility"
      summary: Get service status
      description: Returns the health status of the API service.
      responses:
        200:
          description: Backend service health status
          content:
            application/json:
              schema:
                title: Sample
                type: object
                properties:
                  status:
                    type: string
                    description: Returns 'UP' if the server is currently up and running.

  /user:
    get:
      tags:
      - "User"
      summary: Returns user's information.
      description: Returns current authorized user's information.
      operationId: me
      parameters:
      - in: header
        name: x-auth-token
        schema:
          type: string
          format: jwt
        required: true
      
      responses:
        200:
          description: Current authorized users information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userData'

        400:
          description: Token is invalid.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/errorMsg'
        401:
          description: No token sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMsg'

    post:
      tags:
      - "User"
      summary: Creates a new user account. 
      description: Creates a new user account in the database. Uniqueness in enforced on email.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
      
      responses:
        200:
          description: Information on successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUserResponse'
          headers:
            x-auth-token:
              type: "string"
              description: "User's JWT authorization token."
        409:
          description: Returned when duplicate email is submitted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMsg'         
    
  /login:
    post:
      tags:
      - "User"
      summary: Validates's the user's email and password and returns authorizatrion token upon successful authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginCredentials'
      responses:
        200:
          description: Authorization token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginResponse'
        400:
          description: Returned when there is an error with the login request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMsg'
              
components:
  schemas:
    userData:
      title: Current User's Information
      type: object
      properties:
        id:
          type: string
          description: Users id.
          format: uuid
        email: 
          type: string
          description: Users email address.
          example: test@test.com
          maxLength: 320
          minLength: 6
        firstName:
          type: string
          description: Users first name
          maxLength: 50
        lastName:
          type: string
          description: Users last name
          maxLength: 50
        dateOfBirth:
          type: string
          format: date
          description: Users date of birth

    createUser:
      title: Create User Request
      type: object
      required:
      - email
      - password
      properties:
        email: 
          type: string
          description: Users email address, needs to be unique.
          example: test@test.com
          maxLength: 320
          minLength: 6
        password:
          type: string
          format: password
          description: Users password
          example: test1Password!
          maxLength: 50
          minLength: 8
        firstName:
          type: string
          description: Users first name
          maxLength: 50
        lastName:
          type: string
          description: Users last name
          maxLength: 50
        dateOfBirth:
          type: string
          format: date
          description: Users date of birth

    createUserResponse:
      title: Create User Response
      type: object
      properties:
        id:
          type: string
          description: Users unique id
        email:
          type: string
          description: Users email
        verified:
          type: boolean
          description: Current account verification state

    loginCredentials:
      title: Login credentials
      type: object
      properties:
        email:
          type: string
          description: Users email address
        password:
          type: string
          description: Users password

    loginResponse:
      title: Login response
      type: object
      properties:
        authToken:
          type: string
          description: JWT authorization token
    
    errorMsg:
      title: Error message
      type: object
      properties:
        errorMsg:
          type: string
          description: Error message 
    
